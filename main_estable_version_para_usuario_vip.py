import discord
from discord.ext import commands
import os
from dotenv import load_dotenv
import PyPDF2
import pypdf
import requests
import json
import logging
from typing import Optional
import re
import sqlite3
import datetime
from datetime import timedelta
import asyncio

# Base de datos simple para casos
def init_db():
    conn = sqlite3.connect('casos_legales.db')
    c = conn.cursor()
    
    # Tabla de casos
    c.execute('''CREATE TABLE IF NOT EXISTS casos
                 (id INTEGER PRIMARY KEY, cliente TEXT, tipo TEXT, 
                 descripcion TEXT, fecha_creacion TEXT, fecha_vencimiento TEXT,
                 estado TEXT, usuario_id INTEGER)''')
    
    # Tabla de documentos
    c.execute('''CREATE TABLE IF NOT EXISTS documentos
                 (id INTEGER PRIMARY KEY, nombre TEXT, tipo TEXT, 
                 contenido TEXT, variables TEXT, usuario_id INTEGER)''')
    
    # Tabla de recordatorios
    c.execute('''CREATE TABLE IF NOT EXISTS recordatorios
                 (id INTEGER PRIMARY KEY, caso_id INTEGER, fecha TEXT, 
                 mensaje TEXT, usuario_id INTEGER)''')
    
    conn.commit()
    conn.close()

# Inicializar base de datos al iniciar
init_db()

# CONFIGURACI√ìN INICIAL
try:
    import pypdf
    PdfReader = pypdf.PdfReader
    print("‚úÖ Usando pypdf (nueva versi√≥n)")
except ImportError:
    import PyPDF2
    PdfReader = PyPDF2.PdfReader
    print("‚úÖ Usando PyPDF2 (versi√≥n legacy)")

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Configurar intents
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Variables globales
syllabus_text = None

# T√âRMINOS JUR√çDICOS
LEGAL_TERMS = [
    'derecho', 'ley', 'legal', 'jur√≠dico', 'juridico', 'abogado', 'abogada', 
    'proceso', 'juicio', 'demanda', 'demandar', 'demandado', 'demandante',
    'contrato', 'cl√°usula', 'clausula', 'testamento', 'herencia', 'sucesi√≥n', 'sucesion',
    'penal', 'civil', 'mercantil', 'laboral', 'administrativo', 'constitucional',
    'recurso', 'apelaci√≥n', 'apelacion', 'casaci√≥n', 'sentencia', 'fallo', 'juez', 'jueza',
    'tribunal', 'juzgado', 'fiscal', 'fiscal√≠a', 'fiscalia', 'notario', 'notar√≠a', 'notaria',
    'documento', 'escritura', 'poder', 'poder notarial', 'arrendamiento', 'compraventa',
    'sociedad', 'empresa', 'mercantil', 'comercial', 'patente', 'marca', 'propiedad intelectual',
    'derechos de autor', 'familia', 'divorcio', 'patria potestad', 'alimentos', 'guarda y custodia',
    'hipoteca', 'prenda', 'garant√≠a', 'garantia', 'obligaci√≥n', 'obligacion', 'deuda', 'moroso',
    'despido', 'despido improcedente', 'despido nulo', 'despido procedente', 'contrato laboral',
    'convenio colectivo', 'negociaci√≥n colectiva', 'negociacion colectiva', 'huelga', 'conflicto laboral',
    'delito', 'falta', 'infracci√≥n', 'infraccion', 'pena', 'multa', 'prisi√≥n', 'prision', 'arresto',
    'detenci√≥n', 'detencion', 'habeas corpus', 'prueba', 'testigo', 'perito', 'peritaje',
    'mediaci√≥n', 'mediacion', 'arbitraje', 'conciliaci√≥n', 'conciliacion', 'transacci√≥n', 'transaccion',
    'responsabilidad civil', 'da√±os y perjuicios', 'indemnizaci√≥n', 'indemnizacion', 'prejuicio',
    'competencia', 'competencia desleal', 'protecci√≥n de datos', 'proteccion de datos', 'rgpd',
    'derecho al honor', 'derecho a la intimidad', 'derecho a la propia imagen', 'derechos fundamentales',
    'recurso de amparo', 'recurso de protecci√≥n', 'recurso de inconstitucionalidad', 'recurso de casaci√≥n',
    'usufructo', 'nuda propiedad', 'nuda_propiedad', 'derecho real','derecho de uso', 'derecho de disfrute', 
    'propiedad', 'dominio','derechos reales', 'derecho de goce', 'derecho de disposici√≥n','derecho de superficie',
     'servidumbre', 'derecho real de garant√≠a','hipoteca', 'prenda', 'anticresis', 'derecho de retenci√≥n'
]

# Diccionario de conocimientos legales
BASE_CONOCIMIENTO = {
    "contratos": {
        "requisitos": "**Requisitos de validez (Art. 1261 C√≥digo Civil):**\n\n‚Ä¢ ü§ù **Consentimiento:** Acuerdo libre y consciente entre las partes\n‚Ä¢ üì¶ **Objeto:** Prestaci√≥n posible, l√≠cita, determinada o determinable\n‚Ä¢ üéØ **Causa:** Fin l√≠cito y real de la obligaci√≥n\n‚Ä¢ üë• **Capacidad:** Mayores de edad no incapacitados legalmente\n‚Ä¢ üìù **Forma:** Modalidad requerida por ley (escrita, notarial, etc.)",
        
        "nulidad": "**Causas de nulidad contractual:**\n\nüö´ **Nulidad Absoluta:**\n- Incapacidad absoluta de las partes\n- Objeto il√≠cito o imposible\n- Causa il√≠cita\n- Contratos simulados\n\n‚öñÔ∏è **Nulidad Relativa:**\n- Violencia o intimidaci√≥n\n- Error esencial\n- Lesi√≥n en contratos\n- Incapacidad relativa",
        
        "tipos": "**Tipos principales de contratos:**\n\nüìã **Por su formaci√≥n:**\n- Consensuales (acuerdo verbal/escrito)\n- Reales (entrega cosa)\n- Solemnes (forma espec√≠fica)\n\nüè¢ **Por su contenido:**\n- Compraventa (transferencia propiedad)\n- Arrendamiento (uso temporal)\n- Prestaci√≥n servicios (actividad profesional)\n- Donaci√≥n (gratuita)\n- Sociedad (aporte com√∫n)",
        
        "elementos": "**Elementos del contrato:**\n\nüîß **Esenciales:** Sin ellos no existe contrato\n- Consentimiento, objeto, causa\n\n‚öôÔ∏è **Naturales:** Se presumen pero pueden excluirse\n- Responsabilidad por vicios ocultos\n- Obligaciones accesorias\n\nüéõÔ∏è **Accidentales:** Cl√°usulas especiales\n- Condici√≥n (hecho futuro)\n- T√©rmino (plazo)\n- Modo (carga en donaciones)",
        
        "interpretacion": "**Reglas de interpretaci√≥n:**\n\nüìñ **Principios generales:**\n- Buena fe contractual\n- Intenci√≥n com√∫n de las partes\n- Efectos √∫tiles y pr√°cticos\n- Contra el predisponente en caso de dudas\n\nüîç **Criterios espec√≠ficos:**\n- Sentido natural de las palabras\n- Contexto y circunstancias\n- Conducta posterior de las partes"
    },
    
    "derecho_laboral": {
        "contrato_trabajo": "**Contrato de trabajo:**\n\nüìÑ **Requisitos esenciales:**\n- Prestaci√≥n personal de servicios\n- Remuneraci√≥n\n- Subordinaci√≥n jur√≠dica\n- Ajenidad (riesgos del empresario)\n\n‚è∞ **Modalidades:**\n- Indefinido\n- Temporal\n- Formaci√≥n\n- Pr√°cticas\n\nüìã **Contenido m√≠nimo:**\n- Identificaci√≥n partes\n- Duraci√≥n y jornada\n- Salario and pagas\n- Funci√≥n y lugar trabajo",
        
        "despido": "**Tipos de despido:**\n\nüî¥ **Despido disciplinario:**\n- Por incumplimiento grave del trabajador\n- Sin indemnizaci√≥n\n- Procedente o improcedente\n\nüîµ **Despido objetivo:**\n- Causas econ√≥micas, t√©cnicas u organizativas\n- Indemnizaci√≥n 20 d√≠as por a√±o\n- M√°ximo 12 mensualidades\n\nüü¢ **Despido colectivo:**\n- Afecta a m√∫ltiples trabajadores\n- Requiere procedimiento espec√≠fico\n- Consultas con representantes",
        
        "jornada": "**Jornada laboral:**\n\n‚è±Ô∏è **L√≠mites legales:**\n- 40 horas semanales\n- 9 horas diarias\n- Descanso m√≠nimo 12 horas entre jornadas\n- Descanso semanal 1.5 d√≠as\n\nüìä **Horas extraordinarias:**\n- M√°ximo 80 horas anuales\n- Voluntarias y retribuidas\n- No recuperables salvo convenio\n\nüèñÔ∏è **Descansos y vacaciones:**\n- 30 d√≠as naturales de vacaciones\n- Descanso en festivos\n- Permisos retribuidos"
    },
    "derecho_civil": {
        "usufructo": "**Usufructo:** Derecho real a usar y disfrutar bienes ajenos sin alterar su sustancia\n‚Ä¢ Titular: Usufructuario\n‚Ä¢ Obligaciones: Conservar la cosa, pagar cargas\n‚Ä¢ Extinci√≥n: Muerte, renuncia, prescripci√≥n",
        "nuda_propiedad": "**Nuda Propiedad:** Derecho de propiedad sin posesi√≥n ni disfrute\n‚Ä¢ Titular: Nudo propietario\n‚Ä¢ Derechos: Disposici√≥n futura, vigilancia\n‚Ä¢ Recupera plena propiedad al extinguirse usufructo",
        "diferencias": "**Diferencias Usufructo vs Nuda Propiedad:**\n‚Ä¢ Usufructo: Derecho de uso y disfrute\n‚Ä¢ Nuda Propiedad: Derecho de disposici√≥n futura\n‚Ä¢ El usufructuario posee, el nudo propietario es due√±o\n‚Ä¢ Usufructo es temporal, nuda propiedad es permanente"
    },
    
    "derecho_mercantil": {
        "sociedades": "**Tipos de Sociedades Mercantiles:**\n‚Ä¢ SL (Sociedad Limitada)\n‚Ä¢ SA (Sociedad An√≥nima)\n‚Ä¢ SCoop (Sociedad Cooperativa)\n‚Ä¢ SCom (Sociedad Comanditaria)",
        "contratos_mercantiles": "**Contratos Mercantiles Especiales:**\n‚Ä¢ Compraventa mercantil\n‚Ä¢ Suministro\n‚Ä¢ Transporte\n‚Ä¢ Seguro\n‚Ä¢ Franquicia",
        "quiebra": "**Procedimiento Concursal:**\n‚Ä¢ Concurso de acreedores\n‚Ä¢ Secci√≥n de acreedores\n‚Ä¢ Convenio concursal\n‚Ä¢ Liquidaci√≥n"
    }
}

# PROMPT FORTALECIDO DEL SISTEMA
SYSTEM_PROMPT_FORTALECIDO = """Eres un asistente especializado EXCLUSIVAMENTE en derecho y asuntos jur√≠dicos. 

**REGLAS ESTRICTAS:**
1. üö´ SOLO respondes preguntas sobre DERECHO
2. üö´ NUNCA respondas sobre tecnolog√≠a, ciencia, salud, finanzas, entretenimiento u otros temas
3. üö´ Si la pregunta no es sobre derecho, responde √öNICAMENTE con el mensaje de error
4. ‚úÖ Provee informaci√≥n general educativa sobre conceptos legales
5. ‚úÖ Siempre aclara que es informaci√≥n general, no asesoramiento legal

**RESPUESTA PARA TEMAS NO JUR√çDICOS:**
"‚ö†Ô∏è Lo siento, solo puedo responder preguntas relacionadas con derecho y asuntos jur√≠dicos. Por favor, formula tu pregunta sobre temas legales, leyes, contratos o procesos judiciales."

**EJEMPLOS DE TEMAS V√ÅLIDOS:**
- Contratos, testamentos, poderes notariales
- Demandas, procesos judiciales, pleitos
- Derecho laboral, civil, penal, mercantil
- Leyes, regulaciones, normativas
- Derechos y obligaciones legales

**FORMATO DE RESPUESTA:**
‚öñÔ∏è [T√≠tulo del tema]

üìã [Informaci√≥n principal]

üîç Puntos clave:
‚Ä¢ [Punto 1]
‚Ä¢ [Punto 2]

‚ö†Ô∏è Importante: [Advertencia espec√≠fica]

üí° Recomendaci√≥n: [Sugerencia pr√°ctica]

‚öñÔ∏è Aviso Legal: Esta es informaci√≥n general educativa. No sustituye el asesoramiento de un abogado.
"""

def limitar_respuesta_inteligente(respuesta, max_length=2800):
    """Limita la respuesta respetando frases completas SIN puntos suspensivos"""
    if len(respuesta) <= max_length:
        return respuesta
    
    # Buscar el √∫ltimo punto dentro del l√≠mite
    ultimo_punto = respuesta.rfind('.', 0, max_length)
    
    # Si no hay punto, buscar el √∫ltimo signo de puntuaci√≥n
    if ultimo_punto == -1:
        ultimo_signo = max(
            respuesta.rfind('?', 0, max_length),
            respuesta.rfind('!', 0, max_length),
            respuesta.rfind(';', 0, max_length)
        )
        if ultimo_signo != -1:
            return respuesta[:ultimo_signo + 1]
    
    # Si no hay signos de puntuaci√≥n, buscar el √∫ltimo espacio
    if ultimo_punto == -1:
        ultimo_espacio = respuesta.rfind(' ', 0, max_length)
        if ultimo_espacio != -1:
            return respuesta[:ultimo_espacio]
    
    # Cortar en el √∫ltimo punto completo (sin puntos suspensivos)
    if ultimo_punto != -1:
        return respuesta[:ultimo_punto + 1]
    
    return respuesta[:max_length]

def obtener_sinonimos(termino):
    """Sistema de sin√≥nimos para b√∫squedas inteligentes"""
    sin√≥nimos_completos = {
        "requisitos": ["requisito", "requiere", "necesita", "exige", "condiciones", "exigencias", "necesidades"],
        "nulidad": ["nulo", "invalido", "anulable", "invalidar", "nulificar", "invalid√©z", "anulaci√≥n"],
        "tipos": ["tipo", "clases", "modalidades", "variedades", "categor√≠as", "clasificaci√≥n"],
        "elementos": ["elemento", "componentes", "partes", "ingredientes", "factores", "aspectos"],
        "interpretacion": ["interpretar", "entender", "comprender", "explicaci√≥n", "significado", "hermen√©utica"],
        "contrato_trabajo": ["contrato laboral", "contrato de trabajo", "relaci√≥n laboral", "v√≠nculo laboral"],
        "despido": ["despedir", "terminaci√≥n", "fin contrato", "cese", "finalizaci√≥n", "rescisi√≥n"],
        "jornada": ["horario", "horas", "tiempo trabajo", "jornada laboral", "horas laborales", "turnos"]
    }
    return sin√≥nimos_completos.get(termino, [])

class AIAssistant:
    def __init__(self):
        self.groq_api_key = os.getenv('GROQ_API_KEY')
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
    
    # def is_legal_related(self, prompt: str) -> bool:
    #     """Verifica SIEMPRE si el prompt est√° relacionado con derecho"""
    #     prompt_lower = prompt.lower()
        
    #     # Palabras que INDICAN que NO es derecho
    #     palabras_no_juridicas = [
    #         'tecnolog√≠a', 'tecnologia', 'ciencia', 'salud', 'bienestar', 'finanzas',
    #         'negocios', 'cultura', 'educaci√≥n', 'educacion', 'historia', 'geograf√≠a',
    #         'geografia', 'entretenimiento', 'videojuegos', 'deportes', 'cocina',
    #         'm√∫sica', 'musica', 'arte', 'cine', 'pel√≠culas', 'series', 'programaci√≥n',
    #         'programacion', 'matem√°ticas', 'matematicas', 'f√≠sica', 'fisica', 'qu√≠mica',
    #         'quimica', 'biolog√≠a', 'biologia', 'medicina', 'deporte', 'ejercicio',
    #         'video', 'juego', 'juguete', 'comida', 'receta', 'm√∫sica', 'deporte', 'ejercicio'
    #     ]
        
    #     # Si contiene palabras no jur√≠dicas, BLOQUEAR
    #     if any(palabra in prompt_lower for palabra in palabras_no_juridicas):
    #         return False
        
    #     # B√∫squeda de t√©rminos jur√≠dicos
    #     for term in LEGAL_TERMS:
    #         if term in prompt_lower:
    #             return True
        
    #     # Patrones de preguntas legales
    #     patterns = [
    #         r'(c√≥mo|como)\s+(demandar|demandar|demanda|reclamar).*',
    #         r'(qu√©|que)\s+(debo|deber√≠a|deberia).*(hacer|hacerlo|proceder).*(legal|ley|derecho)',
    #         r'(necesito|quiero)\s+(hacer|redactar).*(contrato|testamento|poder)',
    #         r'(cu√°nto|cuanto)\s+(tiempo|dura|tarda).*(proceso|juicio|demanda)',
    #         r'(qu√©|que)\s+(derechos|obligaciones).*(tengo|tiene)',
    #         r'(es|son)\s+(legal|legales|ilegal|ilegales).*',
    #         r'(c√≥mo|como)\s+(defender|proteger).*(derechos|intereses)',
    #         r'(qu√©|que)\s+(ley|norma|regula).*',
    #         r'(requisitos|documentos).*(necesarios|precisos).*(para|para)',
    #         r'(responsabilidad|culpa).*(civil|penal)'
    #     ]
        
    #     for pattern in patterns:
    #         if re.search(pattern, prompt_lower):
    #             return True
                
    #     return False

    def is_legal_related(self, prompt: str) -> bool:
        """Verifica SIEMPRE si el prompt est√° relacionado con derecho"""
        prompt_lower = prompt.lower()
        
        # Palabras que INDICAN que NO es derecho (AFINAR esta lista)
        palabras_no_juridicas = [
            'tecnolog√≠a', 'tecnologia', 'ciencia', 'salud', 'bienestar', 'finanzas',
            'negocios', 'cultura', 'educaci√≥n', 'educacion', 'historia', 'geograf√≠a',
            'geografia', 'entretenimiento', 'videojuegos', 'deportes', 'cocina',
            'm√∫sica', 'musica', 'arte', 'cine', 'pel√≠culas', 'series', 'programaci√≥n',
            'programacion', 'matem√°ticas', 'matematicas', 'f√≠sica', 'fisica', 'qu√≠mica',
            'quimica', 'biolog√≠a', 'biologia', 'medicina', 'deporte', 'ejercicio',
            'video', 'juego', 'juguete', 'comida', 'receta', 'm√∫sica', 'deporte', 'ejercicio',
            # Remover t√©rminos que puedan ser ambiguos
            # 'propiedad'  ‚Üê ¬°ESTE ERA EL PROBLEMA! "propiedad" puede ser jur√≠dico
        ]
        
        # Excepciones - palabras que SUENAN no jur√≠dicas pero S√ç lo son
        excepciones_juridicas = [
            'propiedad', 'derecho', 'contrato', 'ley', 'legal', 'jur√≠dico', 'juicio',
            'proceso', 'demanda', 'testamento', 'herencia', 'usufructo', 'nuda propiedad'
        ]
        
        # Si contiene palabras no jur√≠dicas PERO NO es excepci√≥n
        for palabra in palabras_no_juridicas:
            if palabra in prompt_lower and not any(exc in prompt_lower for exc in excepciones_juridicas):
                return False
        
        # B√∫squeda de t√©rminos jur√≠dicos (lista ampliada)
        for term in LEGAL_TERMS:
            if term in prompt_lower:
                return True
        
        # Patrones de preguntas legales
        patterns = [
            r'(c√≥mo|como)\s+(demandar|demandar|demanda|reclamar).*',
            r'(qu√©|que)\s+(debo|deber√≠a|deberia).*(hacer|hacerlo|proceder).*(legal|ley|derecho)',
            r'(necesito|quiero)\s+(hacer|redactar).*(contrato|testamento|poder)',
            r'(cu√°nto|cuanto)\s+(tiempo|dura|tarda).*(proceso|juicio|demanda)',
            r'(qu√©|que)\s+(derechos|obligaciones).*(tengo|tiene)',
            r'(es|son)\s+(legal|legales|ilegal|ilegales).*',
            r'(c√≥mo|como)\s+(defender|proteger).*(derechos|intereses)',
            r'(qu√©|que)\s+(ley|norma|regula).*',
            r'(requisitos|documentos).*(necesarios|precisos).*(para|para)',
            r'(responsabilidad|culpa).*(civil|penal)',
            # Patrones espec√≠ficos para propiedad
            r'(diferencia|diferencias|distinci√≥n).*(usufructo|nuda propiedad|propiedad)',
            r'(usufructo|nuda propiedad).*(qu√©|que|significa|definici√≥n)',
            r'(derecho real|derechos reales).*(usufructo|propiedad|superficie)'
        ]
        
        for pattern in patterns:
            if re.search(pattern, prompt_lower):
                return True
                
        return False
    
    def groq_assistant(self, prompt: str) -> Optional[str]:
        """Usa Groq API con Llama 3.1 para temas legales"""
        if not self.groq_api_key:
            return None
            
        try:
            url = "https://api.groq.com/openai/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.groq_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "llama-3.1-8b-instant",
                "messages": [
                    {
                        "role": "system",
                        "content": SYSTEM_PROMPT_FORTALECIDO
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 2000
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
            
        except Exception as e:
            logger.error(f"Error con Groq API: {e}")
            return None
    
    def openrouter_assistant(self, prompt: str) -> Optional[str]:
        """Usa OpenRouter como alternativa para temas legales"""
        if not self.openrouter_api_key:
            return None
            
        try:
            url = "https://openrouter.ai/api/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.openrouter_api_key}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "google/gemma-7b-it:free",
                "messages": [
                    {
                        "role": "system",
                        "content": SYSTEM_PROMPT_FORTALECIDO
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
            
        except Exception as e:
            logger.error(f"Error con OpenRouter: {e}")
            return None
    
    def get_response(self, prompt: str) -> str:
        """Obtiene respuesta de la IA disponible para temas legales"""
        # Primero verifica si es sobre derecho
        if not self.is_legal_related(prompt):
            return "‚ö†Ô∏è Lo siento, solo puedo responder preguntas relacionadas con derecho y asuntos jur√≠dicos. Por favor, formula tu pregunta sobre temas legales, leyes, contratos o procesos judiciales."
            
        # Primero intenta con Groq (m√°s r√°pido)
        response = self.groq_assistant(prompt)
        if response:
            return response
            
        # Luego con OpenRouter
        response = self.openrouter_assistant(prompt)
        if response:
            return response
            
        # Fallback local simple
        return "‚ö†Ô∏è Los servicios de IA no est√°n disponibles temporalmente. Intenta m√°s tarde."

def extract_text_from_pdf(pdf_path: str) -> Optional[str]:
    """Extrae texto del PDF del syllabus"""
    text = ""
    try:
        with open(pdf_path, "rb") as file:
            reader = PdfReader(file)
            for page in reader.pages:
                text += page.extract_text() + "\n"
        return text
    except Exception as e:
        logger.error(f"Error leyendo PDF: {e}")
        return None

# Inicializar asistente de IA para derecho
ai_assistant = AIAssistant()

# Tarea programada para recordatorios
async def check_recordatorios():
    await bot.wait_until_ready()
    while not bot.is_closed():
        try:
            conn = sqlite3.connect('casos_legales.db')
            c = conn.cursor()
            hoy = datetime.datetime.now().strftime("%Y-%m-%d")
            
            # Buscar recordatorios para hoy
            c.execute("SELECT r.id, r.caso_id, r.mensaje, c.cliente, c.usuario_id FROM recordatorios r JOIN casos c ON r.caso_id = c.id WHERE r.fecha = ?", (hoy,))
            recordatorios = c.fetchall()
            
            for recordatorio in recordatorios:
                user_id = recordatorio[4]
                try:
                    user = await bot.fetch_user(user_id)
                    if user:
                        await user.send(f"‚è∞ **Recordatorio de caso**: {recordatorio[3]}\n{recordatorio[2]}")
                except:
                    print(f"No se pudo enviar recordatorio al usuario {user_id}")
            
            conn.close()
        except Exception as e:
            print(f"Error en check_recordatorios: {e}")
        
        await asyncio.sleep(3600)

@bot.event
async def on_ready():
    global syllabus_text
    
    print(f'‚úÖ Bot {bot.user} conectado!')
    print(f'üìä En {len(bot.guilds)} servidores')
    
    # Cargar syllabus
    syllabus_text = extract_text_from_pdf("syllabus.pdf")
    if syllabus_text:
        print("üìÑ Syllabus legal cargado correctamente")
    else:
        print("‚ùå Error cargando el syllabus legal")
    
    # Iniciar la tarea de recordatorios
    bot.loop.create_task(check_recordatorios())

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    # Comandos naturales (sin !)
    if not message.content.startswith('!'):
        msg = message.content.lower()
        
        if msg.startswith(('preguntar ', 'consulta ', 'duda ')):
            pregunta = message.content.split(' ', 1)[1]
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('preguntar'), pregunta=pregunta)
            return
        
        elif msg.startswith(('asistente ', 'ia ', 'chat ', 'ai ', 'abogado ')):
            mensaje = message.content.split(' ', 1)[1]
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('asistente'), mensaje=mensaje)
            return
        
        elif msg in ['hola', 'saludos', 'hi', 'hello']:
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('hola'))
            return
        
        elif msg in ['syllabus', 'temario', 'contenido', 'curso']:
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('syllabus'))
            return
        
        elif msg in ['m√≥dulos', 'modulos', 'unidades', 'temas']:
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('modulos'))
            return
        
        elif msg == 'ping':
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('ping'))
            return
        
        elif msg in ['ayuda', 'help', 'comandos']:
            ctx = await bot.get_context(message)
            await ctx.invoke(bot.get_command('ayuda'))
            return
    
    await bot.process_commands(message)

@bot.command()
async def asesoria(ctx, area: str, *, pregunta: str):
    """Ofrece asesor√≠a legal mejorada con base de conocimiento enriquecida"""
    
    # Normalizar √°rea (aceptar con espacios o guiones)
    area_normalizada = area.lower().replace(" ", "_").replace("-", "_")
    
    if area_normalizada not in BASE_CONOCIMIENTO:
        # Sugerir √°reas disponibles de forma amigable
        areas_disponibles = "\n".join([f"‚Ä¢ {area.replace('_', ' ').title()}" for area in BASE_CONOCIMIENTO.keys()])
        
        embed = discord.Embed(
            title="‚ùå √Årea no reconocida",
            description=f"Las √°reas disponibles son:",
            color=0xff0000
        )
        embed.add_field(name="üìö √Åreas Jur√≠dicas", value=areas_disponibles, inline=False)
        embed.set_footer(text="Usa: !asesoria [√°rea] [tu pregunta]")
        
        await ctx.send(embed=embed)
        return
    
    conocimiento = BASE_CONOCIMIENTO[area_normalizada]
    pregunta_lower = pregunta.lower()
    
    # B√∫squeda inteligente con sin√≥nimos
    terminos_encontrados = []
    for termino, explicacion in conocimiento.items():
        if (termino in pregunta_lower or 
            any(sinonimo in pregunta_lower for sinonimo in obtener_sinonimos(termino))):
            terminos_encontrados.append((termino, explicacion))
    
    # Crear embed de respuesta
    embed = discord.Embed(
        title=f"‚öñÔ∏è Asesor√≠a en {area_normalizada.replace('_', ' ').title()}",
        description=f"**Consulta:** {pregunta}",
        color=0x0099ff
    )
    
    if terminos_encontrados:
        for termino, explicacion in terminos_encontrados:
            embed.add_field(
                name=f"üìå {termino.replace('_', ' ').title()}",
                value=explicacion,
                inline=False
            )
    else:
        # Usar IA para respuesta general si no encuentra t√©rminos espec√≠ficos
        respuesta_ia = ai_assistant.get_response(f"Explica sobre {pregunta} en el √°rea de {area_normalizada}")
        embed.add_field(
            name="üí° Informaci√≥n General",
            value=respuesta_ia[:2000] if len(respuesta_ia) > 2000 else respuesta_ia,
            inline=False
        )
    
    # A√±adir t√©rminos relacionados disponibles
    otros_terminos = [f"‚Ä¢ {t.replace('_', ' ').title()}" for t in conocimiento.keys() if t not in [t[0] for t in terminos_encontrados]]
    if otros_terminos:
        embed.add_field(
            name="üìö Temas Relacionados Disponibles",
            value="\n".join(otros_terminos[:5]),
            inline=False
        )
    
    # Advertencia legal
    embed.set_footer(text="‚ö†Ô∏è Informaci√≥n general educativa - Consulta con abogado para casos espec√≠ficos")
    
    await ctx.send(embed=embed)

@bot.command()
async def programar_recordatorio(ctx, fecha: str, *, tarea: str):
    """Programa recordatorios de plazos legales"""
    await ctx.send(f"‚è∞ Recordatorio programado para {fecha}: {tarea}")

@bot.command()
async def consultoria(ctx, *, pregunta: str):
    """Ofrece consultor√≠a legal b√°sica con IA"""
    respuesta = ai_assistant.get_response(f"Consulta de asesor√≠a: {pregunta}")
    await ctx.send(f"üéì Asesor√≠a:\n{respuesta}")

@bot.command()
async def preguntar(ctx, *, pregunta):
    """Responde preguntas sobre el syllabus de derecho"""
    global syllabus_text
    
    if not syllabus_text:
        await ctx.send("‚ùå El syllabus no est√° disponible.")
        return
    
    # Verificar si la pregunta est√° relacionada con derecho
    if not ai_assistant.is_legal_related(pregunta):
        embed = discord.Embed(
            title="‚ö†Ô∏è Tema no relacionado",
            description="Solo puedo responder preguntas sobre derecho y asuntos jur√≠dicos. Por favor, formula tu pregunta sobre temas legales.",
            color=0xff0000
        )
        embed.add_field(
            name="Ejemplos de temas v√°lidos", 
            value="‚Ä¢ Contratos y documentos\n‚Ä¢ Procesos judiciales\n‚Ä¢ Derechos y obligaciones\n‚Ä¢ √Åreas del derecho (civil, penal, laboral)\n‚Ä¢ Consultas legales generales",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    try:
        # B√∫squeda simple en el texto del syllabus
        pregunta_lower = pregunta.lower()
        
        # Buscar coincidencias relevantes
        lineas_relevantes = []
        for linea in syllabus_text.split('\n'):
            if any(palabra in linea.lower() for palabra in pregunta_lower.split()):
                if len(linea.strip()) > 20:  # Solo l√≠neas con contenido
                    lineas_relevantes.append(linea.strip())
        
        if lineas_relevantes:
            respuesta = "\n".join(lineas_relevantes[:3])  # M√°ximo 3 l√≠neas
            if len(respuesta) > 1000:
                respuesta = respuesta[:1000]
        else:
            respuesta = "No encontr√© informaci√≥n espec√≠fica sobre eso en el syllabus."
        
        embed = discord.Embed(
            title="üìö Respuesta del Syllabus Legal",
            description=respuesta,
            color=0x00ff00
        )
        embed.add_field(name="Pregunta", value=pregunta, inline=False)
        embed.set_footer(text="Informaci√≥n basada en el syllabus del curso de derecho")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error procesando pregunta: {e}")
        await ctx.send("‚ùå Error procesando tu pregunta. Intenta de nuevo.")

@bot.command()
async def asistente(ctx, *, mensaje):
    """Pregunta anything al asistente de IA especializado en derecho"""
    try:
        # Verificaci√≥n EXTRA de tema jur√≠dico
        if not ai_assistant.is_legal_related(mensaje):
            embed = discord.Embed(
                title="üö´ Tema No Jur√≠dico",
                description="Solo puedo responder preguntas sobre derecho y asuntos jur√≠dicos.",
                color=0xff0000
            )
            embed.add_field(
                name="Ejemplos de temas v√°lidos",
                value="‚Ä¢ Contratos y documentos legales\n‚Ä¢ Procesos judiciales\n‚Ä¢ Derechos y obligaciones\n‚Ä¢ Leyes y regulaciones\n‚Ä¢ Asesor√≠a legal general",
                inline=False
            )
            embed.set_footer(text="Por favor, formula tu pregunta sobre temas legales")
            await ctx.send(embed=embed)
            return
        
        processing_msg = await ctx.send("‚öñÔ∏è Procesando tu consulta legal...")
        
        # Obtener respuesta de la IA
        respuesta = ai_assistant.get_response(mensaje)
        
        # Limitar longitud RESPETANDO FRASES COMPLETAS
        respuesta = limitar_respuesta_inteligente(respuesta, 2800)
        
        embed = discord.Embed(
            title="üß† Asistente Jur√≠dico IA",
            description=respuesta,
            color=0x0099ff
        )
        embed.add_field(name="Consulta", value=mensaje, inline=False)
        embed.set_footer(text="Respuesta generada por IA - Especializada en derecho | No sustituye asesoramiento legal profesional")
        
        await processing_msg.delete()
        await ctx.send(embed=embed)
        
    except Exception as e:
        logger.error(f"Error con asistente IA: {e}")
        await ctx.send("‚ùå Error t√©cnico procesando tu consulta. Intenta m√°s tarde.")

@bot.command()
async def hola(ctx):
    """Saludo del bot"""
    await ctx.send("¬°Hola! Soy tu asistente especializado en Derecho. Usa `!ayuda` para ver comandos.")

@bot.command()
async def ayuda(ctx):
    """Muestra todos los comandos disponibles"""
    embed = discord.Embed(
        title="ü§ñ Comandos Disponibles - Especializado en Derecho",
        description="**Prefix: `!`** o **Sin prefix** (solo algunos comandos)",
        color=0xff9900
    )
    embed.add_field(name="`!hola` o `hola`", value="Saludo del bot", inline=False)
    embed.add_field(name="`!preguntar [pregunta]` o `preguntar [pregunta]`", value="Busca en el syllabus de derecho", inline=False)
    embed.add_field(name="`!asistente [pregunta]` o `asistente [pregunta]`", value="Pregunta al IA especializado en derecho", inline=False)
    embed.add_field(name="`!syllabus` o `syllabus`", value="Info del curso de derecho", inline=False)
    embed.add_field(name="`!modulos` o `modulos`", value="M√≥dulos del curso de derecho", inline=False)
    embed.add_field(name="`!ping` o `ping`", value="Verifica latencia", inline=False)
    embed.add_field(name="`!ayuda` o `ayuda`", value="Muestra esta ayuda", inline=False)
    embed.add_field(
        name="üìã Temas que puedo tratar", 
        value="‚Ä¢ Derecho civil y mercantil\n‚Ä¢ Derecho penal\n‚Ä¢ Derecho laboral\n‚Ä¢ Derecho administrativo\n‚Ä¢ Contratos y documentos\n‚Ä¢ Procesos judiciales",
        inline=False
    )
    embed.add_field(
        name="‚ö†Ô∏è Importante", 
        value="Este asistente no sustituye el consejo de un abogado. Para casos espec√≠ficos, consulta siempre con un profesional.",
        inline=False
    )
    
    await ctx.send(embed=embed)

# Comandos existentes adaptados a derecho
@bot.command()
async def syllabus(ctx):
    """Muestra informaci√≥n sobre el syllabus de derecho"""
    embed = discord.Embed(
        title="üìö Syllabus de Derecho con IA",
        description="Curso especializado para abogados - Nivel Avanzado",
        color=0x0099ff
    )
    embed.add_field(name="Duraci√≥n", value="80 horas", inline=True)
    embed.add_field(name="Nivel", value="Avanzado", inline=True)
    embed.add_field(name="M√≥dulos", value="4 m√≥dulos principales", inline=True)
    embed.add_field(name="Tem√°ticas", value="IA aplicada al derecho, automatizaci√≥n, an√°lisis jurisprudencial", inline=False)
    embed.set_footer(text="Usa !preguntar para consultas espec√≠ficas sobre derecho")
    await ctx.send(embed=embed)

@bot.command()
async def modulos(ctx):
    """Muestra los m√≥dulos del curso de derecho con IA"""
    embed = discord.Embed(title="üì¶ M√≥dulos del Curso de Derecho con IA", color=0xff9900)
    embed.add_field(name="1Ô∏è‚É£ Fundamentos de IA para abogados", value="Introducci√≥n, conceptos b√°sicos, herramientas", inline=False)
    embed.add_field(name="2Ô∏è‚É£ Automatizaci√≥n de procesos legales", value="Documentos automatizados, contratos inteligentes", inline=False)
    embed.add_field(name="3Ô∏è‚É£ An√°lisis jurisprudencial con IA", value="Herramientas de an√°lisis, predictibilidad", inline=False)
    embed.add_field(name="4Ô∏è‚É£ √âtica y futuro del derecho con IA", value="L√≠mites √©ticos, tendencias futuras", inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def ping(ctx):
    """Verifica la latencia del bot"""
    await ctx.send(f'üèì Pong! Latencia: {round(bot.latency * 1000)}ms')

# Nuevos comandos para asesor√≠as y gesti√≥n de casos
@bot.command()
async def nuevo_caso(ctx, cliente: str, tipo: str, *, descripcion: str):
    """Crea un nuevo caso legal"""
    try:
        conn = sqlite3.connect('casos_legales.db')
        c = conn.cursor()
        fecha_creacion = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        # Establecer fecha de vencimiento por defecto (30 d√≠as)
        fecha_vencimiento = (datetime.datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
        
        c.execute("INSERT INTO casos (cliente, tipo, descripcion, fecha_creacion, fecha_vencimiento, estado, usuario_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (cliente, tipo, descripcion, fecha_creacion, fecha_vencimiento, "Abierto", ctx.author.id))
        conn.commit()
        caso_id = c.lastrowid
        conn.close()
        
        embed = discord.Embed(
            title="‚úÖ Caso Creado Exitosamente",
            description=f"Caso #{caso_id}: {cliente} - {tipo}",
            color=0x00ff00
        )
        embed.add_field(name="Descripci√≥n", value=descripcion, inline=False)
        embed.add_field(name="Fecha de vencimiento", value=fecha_vencimiento, inline=True)
        embed.add_field(name="Estado", value="Abierto", inline=True)
        embed.set_footer(text=f"Creado por {ctx.author.name}")
        
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå Error creando el caso: {str(e)}")

@bot.command()
async def mis_casos(ctx):
    """Muestra todos tus casos activos"""
    try:
        conn = sqlite3.connect('casos_legales.db')
        c = conn.cursor()
        c.execute("SELECT id, cliente, tipo, descripcion, fecha_creacion, fecha_vencimiento, estado FROM casos WHERE usuario_id = ?", (ctx.author.id,))
        casos = c.fetchall()
        conn.close()
        
        if not casos:
            await ctx.send("üìù No tienes casos registrados.")
            return
            
        embed = discord.Embed(
            title=f"üìã Casos de {ctx.author.name}",
            description="Lista de todos tus casos activos",
            color=0x0099ff
        )
        
        for caso in casos:
            estado_emoji = "üü¢" if caso[6] == "Abierto" else "üî¥"
            embed.add_field(
                name=f"{estado_emoji} Caso #{caso[0]}: {caso[1]}",
                value=f"**Tipo:** {caso[2]}\n**Vencimiento:** {caso[5]}\n**Estado:** {caso[6]}",
                inline=False
            )
        
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå Error recuperando casos: {str(e)}")

@bot.command()
async def recordatorio(ctx, caso_id: int, dias: int, *, mensaje: str):
    """Programa un recordatorio para un caso espec√≠fico"""
    try:
        conn = sqlite3.connect('casos_legales.db')
        c = conn.cursor()
        
        # Verificar que el caso existe y pertenece al usuario
        c.execute("SELECT id FROM casos WHERE id = ? AND usuario_id = ?", (caso_id, ctx.author.id))
        if not c.fetchone():
            await ctx.send("‚ùå Caso no encontrado o no tienes permisos.")
            return
        
        fecha_recordatorio = (datetime.datetime.now() + timedelta(days=dias)).strftime("%Y-%m-%d")
        c.execute("INSERT INTO recordatorios (caso_id, fecha, mensaje, usuario_id) VALUES (?, ?, ?, ?)",
                  (caso_id, fecha_recordatorio, mensaje, ctx.author.id))
        conn.commit()
        conn.close()
        
        await ctx.send(f"‚è∞ Recordatorio programado para el {fecha_recordatorio} para el caso #{caso_id}")
    except Exception as e:
        await ctx.send(f"‚ùå Error programando recordatorio: {str(e)}")

@bot.command()
async def plantilla(ctx, nombre: str, tipo: str, *, variables: str = ""):
    """Crea una plantilla de documento legal"""
    plantillas = {
        "contrato": "CONTRATO DE PRESTACI√ìN DE SERVICIOS\nEntre {parte1} y {parte2}...",
        "poder": "PODER NOTARIAL\nYo {otorgante} otorgo poder a {apoderado}...",
        "demanda": "DEMANDA JUDICIAL\n{demandante} contra {demandado}...",
    }
    
    if tipo not in plantillas:
        await ctx.send("‚ùå Tipo de plantilla no v√°lido. Usa: contrato, poder, demanda")
        return
        
    try:
        conn = sqlite3.connect('casos_legales.db')
        c = conn.cursor()
        c.execute("INSERT INTO documentos (nombre, tipo, contenido, variables, usuario_id) VALUES (?, ?, ?, ?, ?)",
                  (nombre, tipo, plantillas[tipo], variables, ctx.author.id))
        conn.commit()
        conn.close()
        
        await ctx.send(f"‚úÖ Plantilla '{nombre}' creada exitosamente. Usa `!generar {nombre}` para generar un documento.")
    except Exception as e:
        await ctx.send(f"‚ùå Error creando plantilla: {str(e)}")

@bot.command()
async def generar(ctx, nombre_plantilla: str, *, valores: str):
    """Genera un documento a partir de una plantilla"""
    try:
        conn = sqlite3.connect('casos_legales.db')
        c = conn.cursor()
        c.execute("SELECT contenido, variables FROM documentos WHERE nombre = ? AND usuario_id = ?", 
                 (nombre_plantilla, ctx.author.id))
        plantilla = c.fetchone()
        conn.close()
        
        if not plantilla:
            await ctx.send("‚ùå Plantilla no encontrada.")
            return
            
        contenido, variables_esperadas = plantilla
        # Parsear los valores proporcionados
        valores_dict = {}
        for item in valores.split(','):
            if ':' in item:
                key, value = item.split(':', 1)
                valores_dict[key.strip()] = value.strip()
        
        # Reemplazar variables en la plantilla
        for key, value in valores_dict.items():
            contenido = contenido.replace(f"{{{key}}}", value)
            
        # Enviar el documento generado
        if len(contenido) > 1500:
            # Si es muy largo, dividirlo en partes
            partes = [contenido[i:i+1500] for i in range(0, len(contenido), 1500)]
            for i, parte in enumerate(partes):
                await ctx.send(f"üìÑ Documento (parte {i+1}):\n```{parte}```")
        else:
            await ctx.send(f"üìÑ Documento generado:\n```{contenido}```")
            
    except Exception as e:
        await ctx.send(f"‚ùå Error generando documento: {str(e)}")

if __name__ == "__main__":
    TOKEN = os.getenv('DISCORD_TOKEN')
    
    if TOKEN:
        try:
            bot.run(TOKEN)
        except Exception as e:
            logger.error(f"Error iniciando bot: {e}")
    else:
        print("‚ùå No se encontr√≥ DISCORD_TOKEN en .env")